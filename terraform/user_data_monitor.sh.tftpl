#!/bin/bash
exec > /var/log/user_data_output.log 2>&1
set -e

echo "--- Starting user_data script (Final Template-Based Version) ---"

# --- 1. INSTALL DEPENDENCIES ---
echo "Updating packages and installing dependencies..."
sleep 15
apt-get update -y
apt-get install -y docker.io docker-compose git

# --- 2. CREATE CONFIGURATION FILES ---
echo "Creating config directory /opt/monitoring..."
mkdir -p /opt/monitoring

# AQUI ESTA A MUDANCA:
# Escrevemos o conteúdo que o Terraform já preparou para nós.
# Isto evita TODOS os erros de sintaxe do shell.
echo "Creating /opt/monitoring/prometheus.yml..."
cat <<EOF > /opt/monitoring/prometheus.yml
${prometheus_config}
EOF

echo "Creating /opt/monitoring/rules.yml..."
cat <<EOF > /opt/monitoring/rules.yml
${rules_config}
EOF

# Os outros ficheiros (alertmanager, healer, .env, docker-compose)
# são mais simples e podem continuar a ser criados da mesma forma.
cat <<'EOF' > /opt/monitoring/alertmanager.yml
route:
  receiver: 'webhook-healer'
receivers:
  - name: 'webhook-healer'
    webhook_configs:
      - url: 'http://healer:5001/webhook'
EOF

cat <<'EOF' > /opt/monitoring/healer.py
from flask import Flask, request, jsonify
import subprocess, os, logging, threading
app = Flask(__name__)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
TERRAFORM_DIR = "/terraform_project/terraform"
WEB_COUNT = int(os.getenv("WEB_COUNT", "2"))
HEALING_IN_PROGRESS = threading.Lock()
def trigger_terraform_recreation():
    if not HEALING_IN_PROGRESS.acquire(blocking=False):
        app.logger.warning("Healing process already in progress.")
        return
    try:
        app.logger.info("Starting droplet recreation.")
        replace_args = []
        for i in range(WEB_COUNT):
            replace_args.extend(["-replace", f"digitalocean_droplet.web[{i}]"])
        cmd = ["terraform", "apply", "-auto-approve"] + replace_args
        env = os.environ.copy()
        proc = subprocess.run(
            cmd, cwd=TERRAFORM_DIR, capture_output=True,
            text=True, check=True, env=env
        )
        app.logger.info(f"Terraform executed: {proc.stdout}")
    except subprocess.CalledProcessError as e:
        app.logger.error(f"Terraform failed: {e.stderr}")
    except Exception as e:
        app.logger.error(f"Unexpected error: {e}")
    finally:
        HEALING_IN_PROGRESS.release()
@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.json
    app.logger.info(f"Webhook received: {data.get('status')}")
    if data.get('status') == 'firing':
        threading.Thread(target=trigger_terraform_recreation).start()
    return jsonify({"status": "received"}), 200
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001)
EOF

# Este ficheiro .env já não é estritamente necessário para o Prometheus, mas
# o Healer ainda precisa dele, por isso mantemo-lo.
cat <<EOF > /opt/monitoring/.env
DO_TOKEN=${do_token}
EOF

cat <<'EOF' > /opt/monitoring/docker-compose.yml
version: '3.7'
services:
  prometheus:
    image: quay.io/prometheus/prometheus:v2.51.2
    restart: always
    volumes:
      - /opt/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - /opt/monitoring/rules.yml:/etc/prometheus/rules.yml
    ports:
      - '9090:9090'
    command: '--config.file=/etc/prometheus/prometheus.yml'
  alertmanager:
    image: quay.io/prometheus/alertmanager:v0.27.0
    restart: always
    volumes:
      - /opt/monitoring/alertmanager.yml:/etc/alertmanager/config.yml
    ports:
      - '9093:9093'
    command: '--config.file=/etc/alertmanager/config.yml'
  healer:
    image: python:3.11-slim
    restart: always
    volumes:
      - /opt/monitoring/healer.py:/app/healer.py
      - /opt/terraform_project:/terraform_project
    working_dir: /app
    # O docker-compose vai ler o .env do mesmo diretorio
    command: sh -c "pip install flask && python healer.py"
EOF

# --- 3. EXECUTION ---
echo "Cloning repository..."
git clone -b inserting-prometheus https://github.com/arthur-calado/tcc-autohealing-do.git /opt/terraform_project
echo "Enabling Docker..."
systemctl enable --now docker
echo "Starting Docker Compose services..."
docker-compose -f /opt/monitoring/docker-compose.yml up -d
echo "Docker services started successfully!"
echo "--- End of user_data script ---"